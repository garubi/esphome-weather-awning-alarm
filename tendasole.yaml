substitutions:
  name: meteotendasole
  friendly_name: "Stazione Meteo Tenda"
  rain_gauge_calibration: "0.30303"

esphome:
  name: $name
  friendly_name: $friendly_name
  comment: "Anemometer and other sensors mostly for awning retract when there's strong wind or it's raining"
  project:
      name: "garubi.meteo_tenda_sole"
      version: "2.0.0"
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

<<: !include network.yaml

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

captive_portal:

# Enable Dallas temperature probe
dallas:
  - pin: GPIO32

sensor:

# ==============================================================================
# Misc Sensors
# ==============================================================================

  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    update_interval: 60s
    entity_category: "diagnostic"
    device_class: "signal_strength"
    state_class: "measurement"

    # Allows the rainfall to be changed or reset from the frontend if necessary.
  - platform: homeassistant
    id: total_daily_rainfall_adjustment
    internal: true
    entity_id: input_number.total_daily_rainfall_adjustment
    accuracy_decimals: 2

# ------------------------------------------------------------------------------
# Temperature
# ------------------------------------------------------------------------------
  - platform: dallas
    address: 0xf301205f5f377328
    name: Temperatura
    state_class: "measurement"
    device_class: "temperature"


# ------------------------------------------------------------------------------
# Wind Speed
# ------------------------------------------------------------------------------
  # Anemometer circumference in meter: radius (meters) * 2 * 3.14 = 0.05 * 2 * 3.14 = 0,314 m
  # Rotations per seconds: pulses /60 (this is because the pulse_meter counts the pulses in one minute)
  # Wind speed (meters per second): Circumference in meter * Rotations per seconds = 0,314 / 60 * pulses =
  # Multiply factor (meters per second)= Circumference in meter / 60 
  - platform: pulse_meter
    pin: 
      number: GPIO13
      mode: INPUT_PULLUP
    name: 'Vento (m/s)'
    id: meteo_tenda_vento
    icon: 'mdi:weather-windy'
    device_class: "wind_speed"
    state_class: "measurement"
    unit_of_measurement: 'm/s'
    accuracy_decimals: 1
    timeout: 2s # Default 5s
    filters:
      - multiply: 0.005233333
      - throttle_average: 2s # Send average windspeed every 2 seconds, this
                             # seems to be the consensus on weather forums
                             # for recording this data.
                             # https://www.wxforum.net/index.php?topic=41489.0
    # internal_filter: 13us

  - platform: copy
    name: 'Vento (km/h)'
    id: wind_speed_kmh
    source_id: meteo_tenda_vento
    unit_of_measurement: 'km/h'
    icon: 'mdi:weather-windy'
    device_class: "wind_speed"
    state_class: "measurement"
    filters:
      - multiply: 3.6 # m/s to Km/h

# ------------------------------------------------------------------------------
# Rainfall
# ------------------------------------------------------------------------------

  - platform: pulse_meter
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
    name: "Pioggia per ora"
    id: rain_meter
    icon: "mdi:weather-rainy"
    internal_filter: 500ms
    timeout: 45min
    device_class: "precipitation_intensity"
    state_class: "measurement"
    unit_of_measurement: "mm/h"
    accuracy_decimals: 2
    filters:
      # - multiply: 1.224 # Calibration, 0.0204 * 60 for pulses/hour
      - lambda: return x = ${rain_gauge_calibration} * 60 # Calibration, 0.0204 * 60 for pulses/hour
    total:
      name: "Pioggia giornaliera totale"
      id: pioggia_giornaliera_totale
      icon: "mdi:beaker-outline"
      device_class: "precipitation"
      state_class: "total_increasing"
      unit_of_measurement: "mm"
      accuracy_decimals: 4
      filters:
      - multiply: ${rain_gauge_calibration} # Calibration
      on_value: 
        then:
          # Only increment total_rainfall_counter on rain (not on reset at midnight)
          - lambda: |-
              if (id(pioggia_giornaliera_totale).state != 0) {
                id(total_rainfall_counter) += 1; 
              }
          - sensor.template.publish:
              id: total_rainfall
              state: !lambda 'return id(total_rainfall_counter);'

  - platform: template
    name: "Pioggia Totale (dall'uptime)"
    id: total_rainfall
    update_interval: never
    unit_of_measurement: "mm"
    icon: "mdi:beaker-outline"
    device_class: "precipitation"
    state_class: "total_increasing"
    accuracy_decimals: 4
    # Will output total amount of rain over the uptime of the sensor
    # but we use the count in Home Assistant to get statistics
    filters:
      - multiply: ${rain_gauge_calibration}

  # RAIN GAUGE old style (garubi) #######################################################
  - platform: pulse_counter
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
    unit_of_measurement: 'mm'
    device_class: "precipitation"
    state_class: "measurement"
    name: "OLD rain gauge"
    icon: 'mdi:weather-rainy'
    id: rain_gauge
    internal: true
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 13us
    update_interval: 60s
    filters:
      # Each 0.011" (0.2794mm - ${rain_gauge_calibration} ) of rain causes one momentary contact closure
      - multiply: ${rain_gauge_calibration}
    accuracy_decimals: 4

  - platform: integration
    name: "OLD rainfall per min"
    id: rain_per_min
    time_unit: min
    unit_of_measurement: 'mm'
    icon: 'mdi:weather-rainy'
    device_class: "precipitation"
    state_class: "measurement"
    sensor: rain_gauge

  - platform: total_daily_energy
    name: "OLD total daily rain"
    power_id: rain_gauge
    unit_of_measurement: 'mm'
    icon: 'mdi:weather-rainy'
    device_class: "precipitation"
    state_class: "total_increasing"
    # x60 To convert to aggregated rain amount
    filters:
      - multiply: 60
      
interval:
  - interval: 60s
    then:
      - sensor.integration.reset: rain_per_min

# Enable time component to reset energy at midnight
  # if you use a static IP (i.e. static_ip), be sure tu set the DNS address too (is usually the same as the gateway) dns1: XXX.XXX.XXX.XXX : 
  # it's essential for the Time sntp component to run
# time:
#   - platform: sntp
#     timezone: "Europe/Rome"

# ==============================================================================
# Buttons Configuration
# ==============================================================================

button:
  - platform: template
    name: "${friendly_name} Reset Pioggia totale giornaliera"
    icon: "mdi:beaker-remove-outline"
    on_press:
      then:
        - pulse_meter.set_total_pulses:
              id: rain_meter
              value: 0
  - platform: template
    name: "${friendly_name} Aggiusta Pioggia totale giornaliera "
    icon: "mdi:beaker-check-outline"
    on_press:
      then:
        - logger.log:
            format: "Adjustment: %.2f"
            args: [ 'id(total_daily_rainfall_adjustment).state' ]
        - pulse_meter.set_total_pulses:
              id: rain_meter
              value: !lambda 'return id(total_daily_rainfall_adjustment).state / 0.0204;' # rainfall/calibration to set this to total number of pulses
    
time:
  - platform: homeassistant
    id: esptime
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - pulse_meter.set_total_pulses:
              id: rain_meter
              value: 0
              
globals:
   # Total runnning rainfall counter
 - id: total_rainfall_counter
   type: int
   initial_value: '0'